##@mainpage Prototype of the satellite scheduler used for the Electron Losses and Fields Investigation (ELFIN) CubeSat

##@file Responsible for handling all main UI forms and actions (main file).
import sys
import datetime

from PyQt4 import QtCore, QtGui

#Import underlying database/constriaint controls
from Scheduler import Scheduler
from DB_Manager import DatabaseManager
from ConstraintsChecker import ConstraintsChecker
from Database_Classes import Activity 

#Import Qt Dialog Windows
#Autogenerated from Qt Designer by pyuic
#TODO: Name these windows/dialogs more accurately
from ELFIN_Proto import Ui_MainWindow
from Help_Dialog import Ui_Dialog
from Add_Activity_Dialog import Ui_Add_Activity_Dialog

#joke
import names

#Notes: Could make this automove on one window, or actually be a long window that is scrolling

#NOTE: With absolute positioning as layout (due to pyuic4) layout must be completely redone to change/add a new item
#       This heavily implies that we must switch to using GraphicsScene to have manipulable graphic creation / manipulation at runtime

#TODO: Dialogs (class) file
#TODO: Double clicks for modifying info on existing activities
#TODO: Associating new_activity info with button (new class? only has to be info as will either delete or create new or update)

## Main window for program
class MyMainWindow(QtGui.QMainWindow, Ui_MainWindow):

    def __init__(self, parent=None):

        #Qt window initialization
        super(MyMainWindow, self).__init__(parent)
        self.setupUi(self)

        #connect buttons ----------------------------------------------------------------------------------------

        #connect help button so it will display the help window
        self.help_button.clicked.connect(self.display_help_dialog)

        #connect add activity button to function that will display the activity dialog
        self.add_activity_button.clicked.connect(self.display_add_activity_dialog)

        #connect dragging button (example)
        self.make_draggable(self.example_activity_button_1)
        self.make_draggable(self.example_activity_button_2)

        #Create scheduler and scheduler components -----------------------------------------------------------------
        self.scheduler = Scheduler(self)

    #Display Dialogs -------------------------------------------------------------------------------------------------------

    def display_help_dialog(self):

        #create and show HelpDialog
        help_window = HelpDialog(parent=self)
        help_window.show()

    def display_add_activity_dialog(self):

        #create and show activity dialog
        add_activity_dialog = AddActivityDialog(self.scheduler, self)
        add_activity_dialog.show()
        #activity_was_valid = add_activity_dialog.exec()

    #Dragging -------------------------------------------------------------------------------------------------------------

    def make_draggable(self, item):

        #lamda allows arguments to be passed into slots
        item.pressed.connect(lambda: self.turn_on_drag(item))
        item.released.connect(self.turn_off_drag)

    def turn_on_drag(self, item):

        original_cursor_position = QtGui.QCursor.pos()
        original_item_position = item.pos()

        self.drag_timer = QtCore.QTimer()
        self.drag_wait_interval = 50
        self.drag_timer.setInterval(self.drag_wait_interval)

        self.drag_timer.timeout.connect(lambda: self.update_item_position(item, original_cursor_position, original_item_position))

        self.drag_timer.start()

    def turn_off_drag(self):

        self.drag_timer.stop()

    #update horizontal position of item
    def update_item_position(self, item, original_cursor_position, original_item_position):


        #TODO: Bound created buttons to whatever UI area they're meant to exist in (based on their container's dimensions)
        #       This may require overall solution of using GraphicsScene to cover all creation / manipulation of graphics at runtime
        #       Bounds can also be based on tabControl boundaries

        new_position = QtGui.QCursor.pos()

        x_delta = new_position.x() - original_cursor_position.x()

        item_relative_x = original_item_position.x()
        item_relative_y = original_item_position.y()

        #only need x, as items will stay on the same line

        x_updated_position = item_relative_x + x_delta

        item.move(x_updated_position, item_relative_y)

## Help dialog to display when help button is pressed
class HelpDialog(QtGui.QDialog, Ui_Dialog):

    def __init__(self, parent=None):

        #Qt window initialization
        super(HelpDialog, self).__init__(parent)
        self.setupUi(self)

        #connections
        self.help_done_button.clicked.connect(self.close)
        self.help_next_button.clicked.connect(self.next_page)
        self.help_prev_button.clicked.connect(self.prev_page)

        #variables
        self.total_pages = self.help_stackedWidget.count()

    #get index of next/prev page based on the total number of pages
    #then set the page to that index
    def next_page(self):

        new_index = (self.help_stackedWidget.currentIndex()+1) % self.total_pages
        self.help_stackedWidget.setCurrentIndex(new_index)

    def prev_page(self):

        new_index = (self.help_stackedWidget.currentIndex()-1) % self.total_pages
        self.help_stackedWidget.setCurrentIndex(new_index)

    def close(self):

        self.help_done_code = 0

        self.done(self.help_done_code)

## Activity dialog to display to edit/add activities
class AddActivityDialog(QtGui.QDialog, Ui_Add_Activity_Dialog):

    def __init__(self, scheduler, parent=None):

        #Qt window initialization
        super(AddActivityDialog, self).__init__(parent)
        self.setupUi(self)

        self.parent = parent
        self.parent_layout = parent.layout()

        self.add_activity_button.clicked.connect(self.add_activity)
        self.close_button.clicked.connect(self.close)

        self.scheduler = scheduler

        #base positions are original position of first event on top left line
        #base distances are the distances between lines
        #every keyboard movement of an item is 10 units
        #TODO: Non hardcoded
        self.base_x_position = 100
        self.base_y_position = 140
        self.base_x_line_distance = 70
        self.base_y_line_distance = 50

    def add_activity(self):

        start_time = self.start_time_spin_box.value()
        stop_time = self.stop_time_spin_box.value()
        parameters = self.parameters_line_edit.text()
        thing = self.thing_combo_box.currentIndex()

        new_activity = Activity(start_time,stop_time,parameters,thing)
        activity_was_valid = self.scheduler.addActivity(new_activity)

        #if activity was valid, add it to schedule_creator
        if(activity_was_valid):

            self.add_new_activity_item(new_activity)

        self.close()

    def add_new_activity_item(self, new_activity):

        #create button for the new activity
        self.button_name = names.get_full_name()
        self.new_activity_button = QtGui.QPushButton(self.button_name)

        #set position, offsetting according to which thing the event is supposed to be on
        #TODO: Non hardcoded button sizes
        thing_offset = new_activity.thing * self.base_y_line_distance
        self.new_activity_button.setGeometry(QtCore.QRect(self.base_x_position, self.base_y_position+thing_offset, 110, 20))

        tooltip = "<html><head/><body><p>START TIME:  %f </p><p>STOP TIME: %f </p><p>PARAMETERS: %s </p></body></html>" % (new_activity.startTime, new_activity.stopTime, new_activity.parameters)
        self.new_activity_button.setToolTip(tooltip)

        #add to parent widget's layout
        self.parent_layout.addWidget(self.new_activity_button)

        #make draggable
        self.parent.make_draggable(self.new_activity_button)

    def close(self):

        self.activity_done_code=0

        self.done(self.activity_done_code)

if __name__ == "__main__":

    #create Qt application and main window
    app = QtGui.QApplication(sys.argv)

    myapp = MyMainWindow()
    myapp.show()

    new_activity = Activity(50.98,60.22,"params")
    myapp.scheduler.addActivity(new_activity)

    #close qt interface and exit program
    sys.exit(app.exec_())
